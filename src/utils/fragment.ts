import { BaseFragment } from '@codama/renderers-core';

export type Fragment = BaseFragment & {
    imports: Set<string>;
};

export function createFragment(content: string, imports: string[] = []): Fragment {
    return {
        content,
        imports: new Set(imports),
    };
}

export function mergeFragments(fragments: Fragment[]): Fragment {
    const allImports = new Set<string>();
    const contents: string[] = [];

    fragments.forEach(fragment => {
        fragment.imports.forEach(imp => allImports.add(imp));
        if (fragment.content.trim()) {
            contents.push(fragment.content);
        }
    });

    return {
        content: contents.join('\n\n'),
        imports: allImports,
    };
}

export function getDocblockFragment(lines: string[]): Fragment | undefined {
    if (lines.length === 0) return;
    if (lines.length === 1) return createFragment(`/// ${lines[0]}`);
    const prefixedLines = lines.map(line => (line ? `/// ${line}` : '///'));
    return createFragment(prefixedLines.join('\n'));
}

export function getPageFragment(page: Fragment, programName: string): Fragment {
    const header = getDocblockFragment([
        'This code was AUTOGENERATED using the Codama library.',
        'Please DO NOT EDIT THIS FILE, instead use visitors',
        'to add features, then rerun Codama to update it.',
        '',
        'See: https://github.com/codama-idl/codama',
    ]);

    const library = createFragment(`library ${programName};`);

    let imports: Fragment | undefined = undefined;
    if (page.imports.size > 0) {
        const dartImports = Array.from(page.imports)
            .filter(imp => imp.startsWith('dart:'))
            .sort();
        const packageImports = Array.from(page.imports)
            .filter(imp => imp.startsWith('package:'))
            .sort();
        const relativeImports = Array.from(page.imports)
            .filter(imp => !imp.startsWith('dart:') && !imp.startsWith('package:'))
            .sort();

        const allImports = [
            ...dartImports.map(imp => `import '${imp}';`),
            ...packageImports.map(imp => `import '${imp}';`),
            ...relativeImports.map(imp => `import '${imp}';`),
        ];

        if (allImports.length > 0) {
            imports = createFragment(allImports.join('\n'));
        }
    }

    // Merge all fragments
    const fragments = [header, library, imports, page].filter((f): f is Fragment => f !== undefined);
    const merged = mergeFragments(fragments);

    return merged;
}
