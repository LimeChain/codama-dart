/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

import 'dart:typed_data';
import 'package:solana/encoder.dart';
import 'package:solana/solana.dart';
import '../programs.dart';
import '../shared.dart';

const List<int> INITIALIZE_DISCRIMINATOR = [43, 34, 13, 49, 167, 88, 235, 235];

/// Generated instruction class for Initialize.
///

class InitializeInstruction {
  // Accounts
  // The extra_metas_account account.
  final Ed25519HDPublicKey extra_metas_account;

  // The guard account.
  final Ed25519HDPublicKey guard;

  // The mint account.
  final Ed25519HDPublicKey mint;

  // The transfer_hook_authority account.
  final Ed25519HDPublicKey transfer_hook_authority;

  // The system_program account.
  final Ed25519HDPublicKey system_program;

  // The payer account.
  final Ed25519HDPublicKey payer;

  // Args

  InitializeInstruction({
    required this.extra_metas_account,
    required this.guard,
    required this.mint,
    required this.transfer_hook_authority,
    required this.system_program,
    required this.payer,
  });

  /// Builds the `Instruction` (data = discriminator + args).
  Instruction toInstruction({List<AccountMeta> remainingAccounts = const []}) {
    final keys = <AccountMeta>[
      AccountMeta(
        pubKey: extra_metas_account,
        isSigner: false,
        isWriteable: true,
      ),
      AccountMeta(
        pubKey: guard,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: mint,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: transfer_hook_authority,
        isSigner: true,
        isWriteable: true,
      ),
      AccountMeta(
        pubKey: system_program,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: payer,
        isSigner: true,
        isWriteable: true,
      ),
    ];

    if (remainingAccounts.isNotEmpty) {
      keys.addAll(remainingAccounts);
    }

    // Serialize: discriminator (8 bytes) + args
    final writer = BinaryWriter();
    writer.writeDiscriminator(Uint8List.fromList(INITIALIZE_DISCRIMINATOR));
    return Instruction(
      programId: WenTransferGuardProgram.programId,
      accounts: keys,
      data: ByteArray(writer.toBytes()),
    );
  }
}
