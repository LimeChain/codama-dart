/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

import 'dart:typed_data';
import 'package:solana/encoder.dart';
import 'package:solana/solana.dart';
import '../programs.dart';
import '../shared.dart';

const List<int> EXECUTE_DISCRIMINATOR = [105, 37, 101, 197, 75, 251, 102, 26];

/// Generated instruction class for Execute.
///

class ExecuteInstruction {
  // Accounts
  // The source_account account.
  final Ed25519HDPublicKey source_account;

  // The mint account.
  final Ed25519HDPublicKey mint;

  // The destination_account account.
  final Ed25519HDPublicKey destination_account;

  // The owner_delegate account.
  final Ed25519HDPublicKey owner_delegate;

  // The extra_metas_account account.
  final Ed25519HDPublicKey extra_metas_account;

  // The guard account.
  final Ed25519HDPublicKey guard;

  // The instruction_sysvar_account account.
  final Ed25519HDPublicKey instruction_sysvar_account;

  // Args
  final BigInt /* type: u64 */ amount;

  ExecuteInstruction({
    required this.source_account,
    required this.mint,
    required this.destination_account,
    required this.owner_delegate,
    required this.extra_metas_account,
    required this.guard,
    required this.instruction_sysvar_account,
    required this.amount,
  });

  /// Builds the `Instruction` (data = discriminator + args).
  Instruction toInstruction({List<AccountMeta> remainingAccounts = const []}) {
    final keys = <AccountMeta>[
      AccountMeta(
        pubKey: source_account,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: mint,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: destination_account,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: owner_delegate,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: extra_metas_account,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: guard,
        isSigner: false,
        isWriteable: false,
      ),
      AccountMeta(
        pubKey: instruction_sysvar_account,
        isSigner: false,
        isWriteable: false,
      ),
    ];

    if (remainingAccounts.isNotEmpty) {
      keys.addAll(remainingAccounts);
    }

    // Serialize: discriminator (8 bytes) + args
    final writer = BinaryWriter();
    writer.writeDiscriminator(Uint8List.fromList(EXECUTE_DISCRIMINATOR));
    writer.writeU64(amount);

    return Instruction(
      programId: WenTransferGuardProgram.programId,
      accounts: keys,
      data: ByteArray(writer.toBytes()),
    );
  }
}
