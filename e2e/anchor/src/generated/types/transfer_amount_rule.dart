/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

import 'dart:typed_data';
import '../shared.dart';

/// Generated type definition for TransferAmountRule.
///
/// Enforces rules on the amount of tokens being transferred.
/// The rules can be above, below, equal to, or within a range.

abstract class TransferAmountRule {}

class Above extends TransferAmountRule {
  final BigInt /* type: u64 */ value0;

  Above(this.value0);
}

class Below extends TransferAmountRule {
  final BigInt /* type: u64 */ value0;

  Below(this.value0);
}

class Equal extends TransferAmountRule {
  final BigInt /* type: u64 */ value0;

  Equal(this.value0);
}

class Rang extends TransferAmountRule {
  final BigInt /* type: u64 */ value0;
  final BigInt /* type: u64 */ value1;

  Rang(this.value0, this.value1);
}

/// Extension providing serialization methods for TransferAmountRule.
///
extension TransferAmountRuleBorsh on TransferAmountRule {
  /// Converts the enum to a byte representation.
  void toBorsh(BinaryWriter writer) {
    if (this is Above) {
      final v = this as Above;

      writer.writeU64(v.value0);
    }
    if (this is Below) {
      final v = this as Below;

      writer.writeU64(v.value0);
    }
    if (this is Equal) {
      final v = this as Equal;

      writer.writeU64(v.value0);
    }
    if (this is Rang) {
      final v = this as Rang;

      writer.writeU64(v.value0);

      writer.writeU64(v.value1);
    }
  }

  /// Creates an enum from a byte representation.
  static TransferAmountRule fromBorsh(BinaryReader reader) {
    final variant = reader.readU8();
    switch (variant) {
      case 0:
        return Above(reader.readU64());
      case 1:
        return Below(reader.readU64());
      case 2:
        return Equal(reader.readU64());
      case 3:
        return Rang(reader.readU64(), reader.readU64());
      default:
        throw Exception('Unknown transferAmountRule variant: $variant');
    }
  }
}
