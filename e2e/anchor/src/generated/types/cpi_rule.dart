/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

import 'dart:typed_data';
import 'package:solana/solana.dart';
import '../shared.dart';

/// Generated type definition for CpiRule.
///
/// Controls which protocols can interact with the token by
/// enforcing Allow and Deny lists.

abstract class CpiRule {}

class Allow extends CpiRule {
  final List<Ed25519HDPublicKey> value0;

  Allow(this.value0);
}

class Deny extends CpiRule {
  final List<Ed25519HDPublicKey> value0;

  Deny(this.value0);
}

/// Extension providing serialization methods for CpiRule.
///
extension CpiRuleBorsh on CpiRule {
  /// Converts the enum to a byte representation.
  void toBorsh(BinaryWriter writer) {
    if (this is Allow) {
      final v = this as Allow;

      writer.writeArray<Ed25519HDPublicKey>(v.value0,
          (Ed25519HDPublicKey item) {
        writer.writePubkey(Uint8List.fromList(item.bytes));
        ;
      });
    }
    if (this is Deny) {
      final v = this as Deny;

      writer.writeArray<Ed25519HDPublicKey>(v.value0,
          (Ed25519HDPublicKey item) {
        writer.writePubkey(Uint8List.fromList(item.bytes));
        ;
      });
    }
  }

  /// Creates an enum from a byte representation.
  static CpiRule fromBorsh(BinaryReader reader) {
    final variant = reader.readU8();
    switch (variant) {
      case 0:
        return Allow(reader.readArray(() {
          return Ed25519HDPublicKey(reader.readPubkey());
        }));
      case 1:
        return Deny(reader.readArray(() {
          return Ed25519HDPublicKey(reader.readPubkey());
        }));
      default:
        throw Exception('Unknown cpiRule variant: $variant');
    }
  }
}
