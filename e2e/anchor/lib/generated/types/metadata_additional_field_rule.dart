/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

import 'dart:typed_data';
import '../shared.dart';
import '../types/metadata_additional_field_restriction.dart';

/// Generated type definition for MetadataAdditionalFieldRule.
///
/// Enforces rules on a single additional field in the mint metadata.
/// The field must exist and the value must pass the restriction.

class MetadataAdditionalFieldRule {
  final String field;
  final MetadataAdditionalFieldRestriction? value_restrictions;

  MetadataAdditionalFieldRule({
    required this.field,
    required this.value_restrictions,
  });
}

/// Extension providing serialization methods for MetadataAdditionalFieldRule.
///
extension MetadataAdditionalFieldRuleBorsh on MetadataAdditionalFieldRule {
  /// Serializes the struct to its byte representation.
  void toBorsh(BinaryWriter writer) {
    writer.writeString(field);

    writer.writeU8(value_restrictions != null ? 1 : 0);
    if (value_restrictions != null) {
      value_restrictions!.toBorsh(writer);
    }
  }

  /// Creates a struct from its byte representation.
  static MetadataAdditionalFieldRule fromBorsh(BinaryReader reader) {
    return MetadataAdditionalFieldRule(
      field: reader.readString(),
      value_restrictions: reader.readU8() == 1
          ? MetadataAdditionalFieldRestrictionBorsh.fromBorsh(reader)
          : null,
    );
  }
}
