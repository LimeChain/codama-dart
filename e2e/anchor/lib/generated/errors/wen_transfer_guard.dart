/// This code was AUTOGENERATED using the codama library.
/// Please DO NOT EDIT THIS FILE, instead use visitors
/// to add features, then rerun codama to update it.
///
/// https://github.com/codama-idl/codama
///

/// Error codes for the WenTransferGuard program.
class WenTransferGuardErrorCode {
  /// Cpi Rule Enforcement Failed
  static const int CpiRuleEnforcementFailed = 0x1770;

  /// Transfer Amount Rule Enforce Failed
  static const int TransferAmountRuleEnforceFailed = 0x1771;

  /// Metadata Field Does Not Exist
  static const int MetadataFieldDoesNotExist = 0x1772;

  /// Metadata Field Does Not Pass
  static const int MetadataFieldDoesNotPass = 0x1773;

  /// Guard token amount should be at least 1
  static const int GuardTokenAmountShouldBeAtLeastOne = 0x1774;

  /// Not owned by token 2022 program
  static const int NotOwnedByToken2022Program = 0x1775;

  /// Must be initialized by Transfer Hook Authority
  static const int MustBeInitializedByTransferHookAuthority = 0x1776;

  /// Mints assigned Transfer Hook Program is not this one
  static const int MintAssignedTransferHookProgramIsNotThisOne = 0x1777;
}

/// Base class for all WenTransferGuard program errors.
abstract class WenTransferGuardError extends Error {
  /// The numerical error code.
  final int code;

  /// Human-readable error message.
  final String message;

  /// Creates a new WenTransferGuardError.
  WenTransferGuardError(this.code, this.message);

  /// Creates a WenTransferGuardError from a raw error code.
  static WenTransferGuardError fromCode(int code) {
    switch (code) {
      case WenTransferGuardErrorCode.CpiRuleEnforcementFailed:
        return CpiRuleEnforcementFailedError();
      case WenTransferGuardErrorCode.TransferAmountRuleEnforceFailed:
        return TransferAmountRuleEnforceFailedError();
      case WenTransferGuardErrorCode.MetadataFieldDoesNotExist:
        return MetadataFieldDoesNotExistError();
      case WenTransferGuardErrorCode.MetadataFieldDoesNotPass:
        return MetadataFieldDoesNotPassError();
      case WenTransferGuardErrorCode.GuardTokenAmountShouldBeAtLeastOne:
        return GuardTokenAmountShouldBeAtLeastOneError();
      case WenTransferGuardErrorCode.NotOwnedByToken2022Program:
        return NotOwnedByToken2022ProgramError();
      case WenTransferGuardErrorCode.MustBeInitializedByTransferHookAuthority:
        return MustBeInitializedByTransferHookAuthorityError();
      case WenTransferGuardErrorCode
          .MintAssignedTransferHookProgramIsNotThisOne:
        return MintAssignedTransferHookProgramIsNotThisOneError();
      default:
        return UnknownError(code);
    }
  }

  @override
  String toString() => '$runtimeType: [$code] $message';
}

/// Represents an unknown error from the WenTransferGuard program.
class UnknownError extends WenTransferGuardError {
  /// Creates a new UnknownError.
  UnknownError(int code) : super(code, 'Unknown error');
}

/// Cpi Rule Enforcement Failed
class CpiRuleEnforcementFailedError extends WenTransferGuardError {
  /// Creates a new CpiRuleEnforcementFailedError.
  CpiRuleEnforcementFailedError()
      : super(
          WenTransferGuardErrorCode.CpiRuleEnforcementFailed,
          'Cpi Rule Enforcement Failed',
        );
}

/// Transfer Amount Rule Enforce Failed
class TransferAmountRuleEnforceFailedError extends WenTransferGuardError {
  /// Creates a new TransferAmountRuleEnforceFailedError.
  TransferAmountRuleEnforceFailedError()
      : super(
          WenTransferGuardErrorCode.TransferAmountRuleEnforceFailed,
          'Transfer Amount Rule Enforce Failed',
        );
}

/// Metadata Field Does Not Exist
class MetadataFieldDoesNotExistError extends WenTransferGuardError {
  /// Creates a new MetadataFieldDoesNotExistError.
  MetadataFieldDoesNotExistError()
      : super(
          WenTransferGuardErrorCode.MetadataFieldDoesNotExist,
          'Metadata Field Does Not Exist',
        );
}

/// Metadata Field Does Not Pass
class MetadataFieldDoesNotPassError extends WenTransferGuardError {
  /// Creates a new MetadataFieldDoesNotPassError.
  MetadataFieldDoesNotPassError()
      : super(
          WenTransferGuardErrorCode.MetadataFieldDoesNotPass,
          'Metadata Field Does Not Pass',
        );
}

/// Guard token amount should be at least 1
class GuardTokenAmountShouldBeAtLeastOneError extends WenTransferGuardError {
  /// Creates a new GuardTokenAmountShouldBeAtLeastOneError.
  GuardTokenAmountShouldBeAtLeastOneError()
      : super(
          WenTransferGuardErrorCode.GuardTokenAmountShouldBeAtLeastOne,
          'Guard token amount should be at least 1',
        );
}

/// Not owned by token 2022 program
class NotOwnedByToken2022ProgramError extends WenTransferGuardError {
  /// Creates a new NotOwnedByToken2022ProgramError.
  NotOwnedByToken2022ProgramError()
      : super(
          WenTransferGuardErrorCode.NotOwnedByToken2022Program,
          'Not owned by token 2022 program',
        );
}

/// Must be initialized by Transfer Hook Authority
class MustBeInitializedByTransferHookAuthorityError
    extends WenTransferGuardError {
  /// Creates a new MustBeInitializedByTransferHookAuthorityError.
  MustBeInitializedByTransferHookAuthorityError()
      : super(
          WenTransferGuardErrorCode.MustBeInitializedByTransferHookAuthority,
          'Must be initialized by Transfer Hook Authority',
        );
}

/// Mints assigned Transfer Hook Program is not this one
class MintAssignedTransferHookProgramIsNotThisOneError
    extends WenTransferGuardError {
  /// Creates a new MintAssignedTransferHookProgramIsNotThisOneError.
  MintAssignedTransferHookProgramIsNotThisOneError()
      : super(
          WenTransferGuardErrorCode.MintAssignedTransferHookProgramIsNotThisOne,
          'Mints assigned Transfer Hook Program is not this one',
        );
}
