{# Write a Dart documentation comment from an array of strings. #}
{% macro docblock(docs) %}
  {% for doc in docs %}
/// {{ doc }}
  {% endfor %}
{% endmacro %}

{# Generate a Dart class property with documentation #}
{% macro property(type, name, doc, nullable = false) %}
  {% if doc %}{{ docblock([doc]) }}
  {% endif %}
  {{ type }}
  {% if nullable %}?{% endif %}
  {{ name }};
{% endmacro %}

{# Generate a Dart final class property with documentation #}
{% macro finalProperty(type, name, doc, nullable = false) %}
  {% if doc %}{{ docblock([doc]) }}
  {% endif %}
  final {{ type }}
  {% if nullable %}?{% endif %}
  {{ name }};
{% endmacro %}

{# Default constructor for a Dart class with required fields #}
{% macro defaultConstructor(className, fields) %}
  {% if fields.length > 0 %}
    {{ className }}({
    {% for field in fields %}
    required this.{{ field.name }},
    {% endfor %}
  });
  {% else %}
    {{ className }}();
  {% endif %}
{% endmacro %}

{# Recursive Borsh Reader, responsible for handling collections and any nested levels #}
{% macro borshReader(field) %}  
  {{ recursiveReader(field.nesting, field.baseType, field.isStruct, field.size) }}
{% endmacro %}

{% macro recursiveReader(depth, baseType, isStruct, size) %}
  {% if depth > 5 %}
    // ERROR: Nesting depth exceeds supported limit (5)
    throw Exception('Nesting depth exceeds supported limit(5)');
  {% elif depth == 0 %}
    {% if isStruct %}
      {{ baseType }}Borsh.fromBorsh(reader)
    {% else %}
      {{ baseTypeReader(baseType, false, size) }}
    {% endif %}
  {% else %}
    reader.readArray(() {
      {% if isStruct %}
        // item is a struct, call fromBorsh per item
        return {{ baseType }}Borsh.fromBorsh(reader);
      {% else %}
        return {{ recursiveReader(depth - 1, baseType, false, size) }};
      {% endif %}
    })
  {% endif %}
{% endmacro %}

{# Reader for the base types (no nesting) #}
{% macro baseTypeReader(baseType, isStruct, size) %}
  {% if baseType == 'int' %}
    reader.readInt()
  {% elif baseType == 'BigInt' %}
    reader.readBigInt()
  {% elif baseType == 'String' %}
    reader.readString()
  {% elif baseType == 'Uint8List' %}
    reader.readU8Array({{ size if size is defined else '' }})
  {% elif baseType == 'Int8List' %}
    reader.readI8Array({{ size if size is defined else '' }})
  {% elif baseType == 'Uint16List' %}
    reader.readU16Array({{ size if size is defined else '' }})
  {% elif baseType == 'Int16List' %}
    reader.readI16Array({{ size if size is defined else '' }})
  {% elif baseType == 'Uint32List' %}
    reader.readU32Array({{ size if size is defined else '' }})
  {% elif baseType == 'Int32List' %}
    reader.readI32Array({{ size if size is defined else '' }})
  {% elif baseType == 'Uint64List' %}
    reader.readU64Array({{ size if size is defined else '' }})
  {% elif baseType == 'Int64List' %}
    reader.readI64Array({{ size if size is defined else '' }})
  {% elif baseType == 'bool' %}
    reader.readBool()
  {% elif baseType == 'Ed25519HDPublicKey' %}
    Ed25519HDPublicKey(reader.readPubkey())
  {% else %}
    /// TODO: I need to provide panic or error guard to indicate that user is doing something that is not supported
    reader.readUnknownType('{{ baseType }}')
  {% endif %}
{% endmacro %}

{# Recursive Borsh Writer, responsible to handle nested type of collections  #}
{% macro borshWriter(field, overrideFieldName="") %}
  {% set name = overrideFieldName if overrideFieldName else field.name %}
  {{ recursiveWriter(name, field.nesting, field.baseType, field.isStruct, field.size) }}
{% endmacro %}

{% macro recursiveWriter(varName, depth, baseType, isStruct, size) %}
  {% if depth > 5 %}
    // ERROR: Nesting depth exceeds supported limit (5)
    throw Exception('Nesting depth exceeds supported limit(5)');
  {% elif depth == 0 %}
    {% if isStruct %}
      {{ varName }}.toBorsh(writer);
    {% else %}
    {# TODO: I have problem here because of these recursions i put ';' twice because twice is iterated here first trough writeArray and on the recursion i go inside here and i put ';' again #}
      {{ baseTypeWriter(baseType, varName, size) }};
    {% endif %}
  {% else %}
    writer.writeArray<{{ baseType }}>({{ varName }}, ({{ baseType }} item) {
      {% if isStruct %}
        // Each item is a struct
        item.toBorsh(writer);
      {% else %}
        {{ recursiveWriter("item", depth - 1, baseType, false, size) }};
      {% endif %}
    });
  {% endif %}
{% endmacro %}

{# Base Writer, no nested types inside #}
{% macro baseTypeWriter(baseType, varName, size) %}
  {% if baseType == 'int' %}
    writer.writeInt({{ varName }})
  {% elif baseType == 'BigInt' %}
    writer.writeBigInt({{ varName }})
  {% elif baseType == 'String' %}
    writer.writeString({{ varName }})
  {% elif baseType == 'Uint8List' %}
    writer.writeU8Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Int8List' %}
    writer.writeI8Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Uint16List' %}
    writer.writeU16Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Int16List' %}
    writer.writeI16Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Uint32List' %}
    writer.writeU32Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Int32List' %}
    writer.writeI32Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Uint64List' %}
    writer.writeU64Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'Int64List' %}
    writer.writeI64Array({{ varName }}, {{ size if size is defined else 'null' }})
  {% elif baseType == 'bool' %}
    writer.writeBool({{ varName }})
  {% elif baseType == 'Ed25519HDPublicKey' %}
    writer.writePubkey(Uint8List.fromList({{ varName }}.bytes))
  {% else %}
    writer.writeUnknownType('{{ baseType }}')
  {% endif %}
{% endmacro %}